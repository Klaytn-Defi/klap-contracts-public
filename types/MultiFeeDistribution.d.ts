/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultiFeeDistributionInterface extends ethers.utils.Interface {
  functions: {
    "claimVeNFT(uint256)": FunctionFragment;
    "decreaseVeRewardsTotal(uint256)": FunctionFragment;
    "earnedBalances(address)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "exitForVe(uint8,uint256,uint256,uint256)": FunctionFragment;
    "fullyVestedAmount(address)": FunctionFragment;
    "initialize(address,address,address,uint256,address,address)": FunctionFragment;
    "klapTreasury()": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "lockedSupply()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintDirect(address,uint256)": FunctionFragment;
    "minters(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyForWithdrawAmount(address,uint256)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replenishVeRewards(uint256)": FunctionFragment;
    "rewardThreshold()": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "setIncentivesController(address)": FunctionFragment;
    "setMinters(address[])": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "totalVeRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "ve()": FunctionFragment;
    "withdrawableBalance(address)": FunctionFragment;
    "wrapped_native_token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimVeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseVeRewardsTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "exitForVe",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullyVestedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "klapTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDirect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minters", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyForWithdrawAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replenishVeRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapped_native_token",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claimVeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseVeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitForVe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullyVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "klapTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintDirect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyForWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replenishVeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapped_native_token",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "RewardsDurationUpdated(address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class MultiFeeDistribution extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiFeeDistributionInterface;

  functions: {
    claimVeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimVeNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        end: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    "earnedBalances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        end: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    exit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitForVe(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exitForVe(uint8,uint256,uint256,uint256)"(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    fullyVestedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "fullyVestedAmount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    initialize(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,address,address)"(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    klapTreasury(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "klapTreasury()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lockDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockedSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "minters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    penaltyForWithdrawAmount(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "penaltyForWithdrawAmount(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    replenishVeRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replenishVeRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardsDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setIncentivesController(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIncentivesController(address)"(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinters(address[])"(
      _minters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "stakingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    swapRouter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "swapRouter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalVeRewards(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ve(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ve()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "withdrawableBalance(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    wrapped_native_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  claimVeNFT(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimVeNFT(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseVeRewardsTotal(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseVeRewardsTotal(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earnedBalances(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
  }>;

  "earnedBalances(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    earningsData: {
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }[];
    0: BigNumber;
    1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
  }>;

  exit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitForVe(
    _type: BigNumberish,
    slippage: BigNumberish,
    _lock_duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exitForVe(uint8,uint256,uint256,uint256)"(
    _type: BigNumberish,
    slippage: BigNumberish,
    _lock_duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  fullyVestedAmount(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fullyVestedAmount(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _stakingToken: string,
    _ve: string,
    _wrapped_native_token: string,
    rewardPercentage: BigNumberish,
    _klapTreasury: string,
    _swapRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,address,address)"(
    _stakingToken: string,
    _ve: string,
    _wrapped_native_token: string,
    rewardPercentage: BigNumberish,
    _klapTreasury: string,
    _swapRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  klapTreasury(overrides?: CallOverrides): Promise<string>;

  "klapTreasury()"(overrides?: CallOverrides): Promise<string>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintDirect(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintDirect(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "minters(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  penaltyForWithdrawAmount(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "penaltyForWithdrawAmount(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  replenishVeRewards(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replenishVeRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewards(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  setIncentivesController(
    _incentivesController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIncentivesController(address)"(
    _incentivesController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinters(address[])"(
    _minters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapRouter(
    _swapRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapRouter(address)"(
    _swapRouter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ve(overrides?: CallOverrides): Promise<string>;

  "ve()"(overrides?: CallOverrides): Promise<string>;

  withdrawableBalance(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "withdrawableBalance(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    penaltyAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  wrapped_native_token(overrides?: CallOverrides): Promise<string>;

  "wrapped_native_token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimVeNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVeNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        end: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    "earnedBalances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      earningsData: {
        amount: BigNumber;
        end: BigNumber;
        0: BigNumber;
        1: BigNumber;
      }[];
      0: BigNumber;
      1: { amount: BigNumber; end: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    exit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitForVe(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitForVe(uint8,uint256,uint256,uint256)"(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullyVestedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fullyVestedAmount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,address,address)"(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    klapTreasury(overrides?: CallOverrides): Promise<string>;

    "klapTreasury()"(overrides?: CallOverrides): Promise<string>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "minters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    penaltyForWithdrawAmount(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "penaltyForWithdrawAmount(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    replenishVeRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "replenishVeRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(
      _incentivesController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIncentivesController(address)"(
      _incentivesController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(_minters: string[], overrides?: CallOverrides): Promise<void>;

    "setMinters(address[])"(
      _minters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ve(overrides?: CallOverrides): Promise<string>;

    "ve()"(overrides?: CallOverrides): Promise<string>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "withdrawableBalance(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      penaltyAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    wrapped_native_token(overrides?: CallOverrides): Promise<string>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Recovered(token: null, amount: null): EventFilter;

    RewardAdded(reward: null): EventFilter;

    RewardPaid(
      user: string | null,
      rewardsToken: string | null,
      reward: null
    ): EventFilter;

    RewardsDurationUpdated(token: null, newDuration: null): EventFilter;

    Staked(user: string | null, amount: null): EventFilter;

    Withdrawn(user: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    claimVeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimVeNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earnedBalances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earnedBalances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitForVe(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exitForVe(uint8,uint256,uint256,uint256)"(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    fullyVestedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fullyVestedAmount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,address,address)"(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    klapTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    "klapTreasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "minters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyForWithdrawAmount(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "penaltyForWithdrawAmount(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    replenishVeRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replenishVeRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIncentivesController(address)"(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinters(_minters: string[], overrides?: Overrides): Promise<BigNumber>;

    "setMinters(address[])"(
      _minters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ve(overrides?: CallOverrides): Promise<BigNumber>;

    "ve()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableBalance(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapped_native_token(overrides?: CallOverrides): Promise<BigNumber>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimVeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimVeNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earnedBalances(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedBalances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitForVe(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exitForVe(uint8,uint256,uint256,uint256)"(
      _type: BigNumberish,
      slippage: BigNumberish,
      _lock_duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    fullyVestedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fullyVestedAmount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,address,address)"(
      _stakingToken: string,
      _ve: string,
      _wrapped_native_token: string,
      rewardPercentage: BigNumberish,
      _klapTreasury: string,
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    klapTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "klapTreasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyForWithdrawAmount(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "penaltyForWithdrawAmount(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    replenishVeRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replenishVeRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIncentivesController(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIncentivesController(address)"(
      _incentivesController: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinters(address[])"(
      _minters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalVeRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawableBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawableBalance(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapped_native_token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrapped_native_token()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
