/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "DECIMAL_PRECISION()": FunctionFragment;
    "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()": FunctionFragment;
    "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()": FunctionFragment;
    "TARGET_DIGITS()": FunctionFragment;
    "TIMEOUT()": FunctionFragment;
    "bandBase()": FunctionFragment;
    "bandOracle()": FunctionFragment;
    "bandQuote()": FunctionFragment;
    "chainlinkOracle()": FunctionFragment;
    "fetchPrice()": FunctionFragment;
    "lastGoodPrice()": FunctionFragment;
    "status()": FunctionFragment;
    "updatePrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_DIGITS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIMEOUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "bandBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bandOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bandQuote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chainlinkOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastGoodPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_DIGITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIMEOUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bandBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bandOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bandQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGoodPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "LastGoodPriceUpdated(uint256)": EventFragment;
    "PriceFeedStatusChanged(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LastGoodPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedStatusChanged"): EventFragment;
}

export class PriceFeed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceFeedInterface;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "DECIMAL_PRECISION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    TARGET_DIGITS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "TARGET_DIGITS()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    TIMEOUT(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "TIMEOUT()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    bandBase(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bandBase()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    bandOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bandOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    bandQuote(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bandQuote()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    chainlinkOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "chainlinkOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    fetchPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fetchPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastGoodPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastGoodPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    status(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "status()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    updatePrice(overrides?: Overrides): Promise<ContractTransaction>;

    "updatePrice()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  "DECIMAL_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  TARGET_DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

  "TARGET_DIGITS()"(overrides?: CallOverrides): Promise<BigNumber>;

  TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  "TIMEOUT()"(overrides?: CallOverrides): Promise<BigNumber>;

  bandBase(overrides?: CallOverrides): Promise<string>;

  "bandBase()"(overrides?: CallOverrides): Promise<string>;

  bandOracle(overrides?: CallOverrides): Promise<string>;

  "bandOracle()"(overrides?: CallOverrides): Promise<string>;

  bandQuote(overrides?: CallOverrides): Promise<string>;

  "bandQuote()"(overrides?: CallOverrides): Promise<string>;

  chainlinkOracle(overrides?: CallOverrides): Promise<string>;

  "chainlinkOracle()"(overrides?: CallOverrides): Promise<string>;

  fetchPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "fetchPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "lastGoodPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  updatePrice(overrides?: Overrides): Promise<ContractTransaction>;

  "updatePrice()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "DECIMAL_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TARGET_DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    "TARGET_DIGITS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    "TIMEOUT()"(overrides?: CallOverrides): Promise<BigNumber>;

    bandBase(overrides?: CallOverrides): Promise<string>;

    "bandBase()"(overrides?: CallOverrides): Promise<string>;

    bandOracle(overrides?: CallOverrides): Promise<string>;

    "bandOracle()"(overrides?: CallOverrides): Promise<string>;

    bandQuote(overrides?: CallOverrides): Promise<string>;

    "bandQuote()"(overrides?: CallOverrides): Promise<string>;

    chainlinkOracle(overrides?: CallOverrides): Promise<string>;

    "chainlinkOracle()"(overrides?: CallOverrides): Promise<string>;

    fetchPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastGoodPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    updatePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "updatePrice()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    LastGoodPriceUpdated(_lastGoodPrice: null): EventFilter;

    PriceFeedStatusChanged(newStatus: null): EventFilter;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "DECIMAL_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TARGET_DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    "TARGET_DIGITS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    "TIMEOUT()"(overrides?: CallOverrides): Promise<BigNumber>;

    bandBase(overrides?: CallOverrides): Promise<BigNumber>;

    "bandBase()"(overrides?: CallOverrides): Promise<BigNumber>;

    bandOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "bandOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    bandQuote(overrides?: CallOverrides): Promise<BigNumber>;

    "bandQuote()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "chainlinkOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetchPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastGoodPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastGoodPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(overrides?: Overrides): Promise<BigNumber>;

    "updatePrice()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DECIMAL_PRECISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TARGET_DIGITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TARGET_DIGITS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TIMEOUT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bandBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bandBase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bandOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bandOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bandQuote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bandQuote()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainlinkOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastGoodPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastGoodPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updatePrice()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
