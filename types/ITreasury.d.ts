/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITreasuryInterface extends ethers.utils.Interface {
  functions: {
    "addReward(address)": FunctionFragment;
    "burnAndRedeem(uint256)": FunctionFragment;
    "dev()": FunctionFragment;
    "devPercent()": FunctionFragment;
    "initializeBurn()": FunctionFragment;
    "initializedBurn()": FunctionFragment;
    "setDevPercent(uint256)": FunctionFragment;
    "setLendingPoolConfigurator(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnAndRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializedBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfigurator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devPercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITreasury extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITreasuryInterface;

  functions: {
    addReward(
      rewardsToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(address)"(
      rewardsToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnAndRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnAndRedeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "dev()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    devPercent(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "devPercent()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    initializeBurn(overrides?: Overrides): Promise<ContractTransaction>;

    "initializeBurn()"(overrides?: Overrides): Promise<ContractTransaction>;

    initializedBurn(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    setDevPercent(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevPercent(uint256)"(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingPoolConfigurator(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolConfigurator(address)"(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "stakingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  addReward(
    rewardsToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(address)"(
    rewardsToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnAndRedeem(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnAndRedeem(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  "dev()"(overrides?: CallOverrides): Promise<string>;

  devPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  initializeBurn(overrides?: Overrides): Promise<ContractTransaction>;

  "initializeBurn()"(overrides?: Overrides): Promise<ContractTransaction>;

  initializedBurn(overrides?: CallOverrides): Promise<boolean>;

  "initializedBurn()"(overrides?: CallOverrides): Promise<boolean>;

  setDevPercent(
    devPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevPercent(uint256)"(
    devPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingPoolConfigurator(
    lendingPoolConfigurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolConfigurator(address)"(
    lendingPoolConfigurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addReward(rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    "addReward(address)"(
      rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAndRedeem(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnAndRedeem(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(overrides?: CallOverrides): Promise<string>;

    "dev()"(overrides?: CallOverrides): Promise<string>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeBurn(overrides?: CallOverrides): Promise<void>;

    "initializeBurn()"(overrides?: CallOverrides): Promise<void>;

    initializedBurn(overrides?: CallOverrides): Promise<boolean>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<boolean>;

    setDevPercent(
      devPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevPercent(uint256)"(
      devPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolConfigurator(
      lendingPoolConfigurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingPoolConfigurator(address)"(
      lendingPoolConfigurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addReward(rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    "addReward(address)"(
      rewardsToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnAndRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnAndRedeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    "dev()"(overrides?: CallOverrides): Promise<BigNumber>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeBurn(overrides?: Overrides): Promise<BigNumber>;

    "initializeBurn()"(overrides?: Overrides): Promise<BigNumber>;

    initializedBurn(overrides?: CallOverrides): Promise<BigNumber>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevPercent(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevPercent(uint256)"(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingPoolConfigurator(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingPoolConfigurator(address)"(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      rewardsToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(address)"(
      rewardsToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnAndRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnAndRedeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dev()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeBurn(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializeBurn()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initializedBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initializedBurn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDevPercent(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevPercent(uint256)"(
      devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolConfigurator(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolConfigurator(address)"(
      lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
