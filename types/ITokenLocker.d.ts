/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITokenLockerInterface extends ethers.utils.Interface {
  functions: {
    "getWeek()": FunctionFragment;
    "startTime()": FunctionFragment;
    "userWeight(address)": FunctionFragment;
    "weeklyWeight(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getWeek", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "userWeight", values: [string]): string;
  encodeFunctionData(
    functionFragment: "weeklyWeight",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getWeek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWeight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weeklyWeight",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITokenLocker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenLockerInterface;

  functions: {
    getWeek(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getWeek()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    startTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "startTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    userWeight(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userWeight(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    weeklyWeight(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "weeklyWeight(address,uint256)"(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  getWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "getWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  userWeight(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userWeight(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weeklyWeight(
    user: string,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "weeklyWeight(address,uint256)"(
    user: string,
    week: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    userWeight(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userWeight(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weeklyWeight(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "weeklyWeight(address,uint256)"(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    userWeight(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userWeight(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weeklyWeight(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "weeklyWeight(address,uint256)"(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWeek()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userWeight(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userWeight(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weeklyWeight(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weeklyWeight(address,uint256)"(
      user: string,
      week: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
