/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "addReward(address)": FunctionFragment;
    "burnAndRedeem(uint256)": FunctionFragment;
    "claimableRewards(uint256)": FunctionFragment;
    "dev()": FunctionFragment;
    "devPercent()": FunctionFragment;
    "initialize(address,address,uint256,address)": FunctionFragment;
    "initializeBurn()": FunctionFragment;
    "initializedBurn()": FunctionFragment;
    "isRewardToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address,uint256)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardTokensLength()": FunctionFragment;
    "setDevPercent(uint256)": FunctionFragment;
    "setLendingPoolConfigurator(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnAndRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializedBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfigurator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devPercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
}

export class Treasury extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TreasuryInterface;

  functions: {
    addReward(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(address)"(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnAndRedeem(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnAndRedeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    "claimableRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    dev(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "dev()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    devPercent(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "devPercent()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,address)"(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeBurn(overrides?: Overrides): Promise<ContractTransaction>;

    "initializeBurn()"(overrides?: Overrides): Promise<ContractTransaction>;

    initializedBurn(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isRewardToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewardTokensLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardTokensLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setDevPercent(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevPercent(uint256)"(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingPoolConfigurator(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolConfigurator(address)"(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "stakingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addReward(
    _rewardsToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(address)"(
    _rewardsToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnAndRedeem(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnAndRedeem(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimableRewards(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  "claimableRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  dev(overrides?: CallOverrides): Promise<string>;

  "dev()"(overrides?: CallOverrides): Promise<string>;

  devPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _stakingToken: string,
    _lendingPoolConfigurator: string,
    _devPercent: BigNumberish,
    _dev: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,address)"(
    _stakingToken: string,
    _lendingPoolConfigurator: string,
    _devPercent: BigNumberish,
    _dev: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeBurn(overrides?: Overrides): Promise<ContractTransaction>;

  "initializeBurn()"(overrides?: Overrides): Promise<ContractTransaction>;

  initializedBurn(overrides?: CallOverrides): Promise<boolean>;

  "initializedBurn()"(overrides?: CallOverrides): Promise<boolean>;

  isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isRewardToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rescue(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescue(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDevPercent(
    _devPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevPercent(uint256)"(
    _devPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingPoolConfigurator(
    _lendingPoolConfigurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolConfigurator(address)"(
    _lendingPoolConfigurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addReward(_rewardsToken: string, overrides?: CallOverrides): Promise<void>;

    "addReward(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAndRedeem(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnAndRedeem(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    "claimableRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    dev(overrides?: CallOverrides): Promise<string>;

    "dev()"(overrides?: CallOverrides): Promise<string>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,address)"(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeBurn(overrides?: CallOverrides): Promise<void>;

    "initializeBurn()"(overrides?: CallOverrides): Promise<void>;

    initializedBurn(overrides?: CallOverrides): Promise<boolean>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<boolean>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isRewardToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevPercent(
      _devPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevPercent(uint256)"(
      _devPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolConfigurator(
      _lendingPoolConfigurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingPoolConfigurator(address)"(
      _lendingPoolConfigurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardPaid(
      user: string | null,
      rewardsToken: string | null,
      reward: null
    ): EventFilter;
  };

  estimateGas: {
    addReward(_rewardsToken: string, overrides?: Overrides): Promise<BigNumber>;

    "addReward(address)"(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnAndRedeem(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnAndRedeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimableRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    "dev()"(overrides?: CallOverrides): Promise<BigNumber>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,address)"(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeBurn(overrides?: Overrides): Promise<BigNumber>;

    "initializeBurn()"(overrides?: Overrides): Promise<BigNumber>;

    initializedBurn(overrides?: CallOverrides): Promise<BigNumber>;

    "initializedBurn()"(overrides?: CallOverrides): Promise<BigNumber>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isRewardToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevPercent(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevPercent(uint256)"(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingPoolConfigurator(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingPoolConfigurator(address)"(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(address)"(
      _rewardsToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnAndRedeem(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnAndRedeem(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dev()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,address)"(
      _stakingToken: string,
      _lendingPoolConfigurator: string,
      _devPercent: BigNumberish,
      _dev: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeBurn(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializeBurn()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initializedBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initializedBurn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRewardToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokensLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDevPercent(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevPercent(uint256)"(
      _devPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolConfigurator(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolConfigurator(address)"(
      _lendingPoolConfigurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
