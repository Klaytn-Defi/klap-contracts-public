/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVeInterface extends ethers.utils.Interface {
  functions: {
    "abstain(uint256)": FunctionFragment;
    "balanceOfNFT(uint256)": FunctionFragment;
    "balanceOfNFTAt(uint256,uint256)": FunctionFragment;
    "create_lock_for(uint256,uint256,address)": FunctionFragment;
    "create_lp_lock(uint256,uint256,address)": FunctionFragment;
    "getUserFactor(address)": FunctionFragment;
    "idToOwner(uint256)": FunctionFragment;
    "locked(uint256)": FunctionFragment;
    "locked_duration(uint256)": FunctionFragment;
    "lp_token()": FunctionFragment;
    "rewardPerTokenId(uint256)": FunctionFragment;
    "start_time(uint256)": FunctionFragment;
    "tokenType(uint256)": FunctionFragment;
    "voting(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "abstain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFTAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock_for",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lp_lock",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "idToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked_duration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "start_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "abstain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFTAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lp_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "locked_duration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start_time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IVe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVeInterface;

  functions: {
    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    locked(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "locked(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    locked_duration(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "locked_duration(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lp_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lp_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardPerTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rewardPerTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenType(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "tokenType(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  abstain(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "abstain(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOfNFT(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfNFT(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNFTAt(
    _tokenId: BigNumberish,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfNFTAt(uint256,uint256)"(
    _tokenId: BigNumberish,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  create_lock_for(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lock_for(uint256,uint256,address)"(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  create_lp_lock(
    _lp_value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lp_lock(uint256,uint256,address)"(
    _lp_value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUserFactor(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "idToOwner(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  locked(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "locked(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  locked_duration(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "locked_duration(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  rewardPerTokenId(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rewardPerTokenId(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  start_time(
    _token_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "start_time(uint256)"(
    _token_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenType(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "tokenType(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  voting(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voting(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    sender: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    sender: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    abstain(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    locked(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    locked_duration(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked_duration(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    rewardPerTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "tokenType(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    voting(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    abstain(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "locked(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    locked_duration(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "locked_duration(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rewardPerTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenType(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voting(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "locked(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    locked_duration(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "locked_duration(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenType(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenType(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
