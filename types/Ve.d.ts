/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VeInterface extends ethers.utils.Interface {
  functions: {
    "EARLY_VE_REWARD_MULTIPLIER()": FunctionFragment;
    "LP_MULTIPLIER()": FunctionFragment;
    "MIN_LOCK_TIME()": FunctionFragment;
    "abstain(uint256)": FunctionFragment;
    "amount_stored(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAtNFT(uint256,uint256)": FunctionFragment;
    "balanceOfHypotheticalNFT(uint256,uint256)": FunctionFragment;
    "balanceOfNFT(uint256)": FunctionFragment;
    "balanceOfNFTAt(uint256,uint256)": FunctionFragment;
    "block_number()": FunctionFragment;
    "checkpoint()": FunctionFragment;
    "claimFromMasterChef()": FunctionFragment;
    "create_lock(uint256,uint256)": FunctionFragment;
    "create_lock_for(uint256,uint256,address)": FunctionFragment;
    "create_lp_lock(uint256,uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit_for(uint256,uint256)": FunctionFragment;
    "epoch()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getUserFactor(address)": FunctionFragment;
    "get_last_user_slope(uint256)": FunctionFragment;
    "get_ve_reward_amount(uint256,uint256)": FunctionFragment;
    "idToOwner(uint256)": FunctionFragment;
    "increase_amount(uint256,uint256)": FunctionFragment;
    "increase_unlock_time(uint256,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedOrOwner(address,uint256)": FunctionFragment;
    "locked(uint256)": FunctionFragment;
    "locked__end(uint256)": FunctionFragment;
    "locked_duration(uint256)": FunctionFragment;
    "lp_token()": FunctionFragment;
    "masterChef()": FunctionFragment;
    "merge(uint256,uint256)": FunctionFragment;
    "multi_fee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownership_change(uint256)": FunctionFragment;
    "point_history(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerTokenId(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFairAssetContract(address)": FunctionFragment;
    "setLPMultiplier(uint8)": FunctionFragment;
    "setLPToken(address)": FunctionFragment;
    "setMasterchefContract(address)": FunctionFragment;
    "setMinLockTime(uint128)": FunctionFragment;
    "setMultiFeeContract(address)": FunctionFragment;
    "setVeMultiplier(uint8)": FunctionFragment;
    "setVoter(address)": FunctionFragment;
    "slope_changes(uint256)": FunctionFragment;
    "start_time(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenType(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "totalSupplyAtT(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "user_point_epoch(uint256)": FunctionFragment;
    "user_point_history(uint256,uint256)": FunctionFragment;
    "user_point_history__ts(uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "voted(uint256)": FunctionFragment;
    "voter()": FunctionFragment;
    "voting(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EARLY_VE_REWARD_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LP_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "abstain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amount_stored",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAtNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfHypotheticalNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFTAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "block_number",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromMasterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock_for",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lp_lock",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit_for",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_user_slope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_ve_reward_amount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked__end",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked_duration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "multi_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownership_change",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "point_history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFairAssetContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLPToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMasterchefContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiFeeContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setVoter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "slope_changes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "start_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_epoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_point_history__ts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "voted", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EARLY_VE_REWARD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LP_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "abstain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amount_stored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAtNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfHypotheticalNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFTAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "block_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFromMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lp_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_last_user_slope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_ve_reward_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "locked__end",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "locked_duration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multi_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownership_change",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFairAssetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMasterchefContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiFeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slope_changes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start_time", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_point_history__ts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Ve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VeInterface;

  functions: {
    EARLY_VE_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "EARLY_VE_REWARD_MULTIPLIER()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    LP_MULTIPLIER(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "LP_MULTIPLIER()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MIN_LOCK_TIME()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    amount_stored(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "amount_stored(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfAtNFT(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfAtNFT(uint256,uint256)"(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfHypotheticalNFT(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfHypotheticalNFT(uint256,uint256)"(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    block_number(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "block_number()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimFromMasterChef(overrides?: Overrides): Promise<ContractTransaction>;

    "claimFromMasterChef()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit_for(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "epoch()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getUserFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    get_last_user_slope(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "get_last_user_slope(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    get_ve_reward_amount(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "get_ve_reward_amount(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_amount(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_unlock_time(uint256,uint256)"(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedOrOwner(address,uint256)"(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    locked__end(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "locked__end(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    locked_duration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "locked_duration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lp_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lp_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    masterChef(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "masterChef()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "merge(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multi_fee(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "multi_fee()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ownership_change(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ownership_change(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPerTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPerTokenId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFairAssetContract(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFairAssetContract(address)"(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLPMultiplier(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLPMultiplier(uint8)"(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLPToken(
      _lp_token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLPToken(address)"(
      _lp_token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMasterchefContract(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMasterchefContract(address)"(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinLockTime(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinLockTime(uint128)"(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultiFeeContract(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultiFeeContract(address)"(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVeMultiplier(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVeMultiplier(uint8)"(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVoter(
      _voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVoter(address)"(
      _voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "tokenType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyAtT(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    user_point_epoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "user_point_epoch(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "user_point_history(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    user_point_history__ts(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "user_point_history__ts(uint256,uint256)"(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    version(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    voted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "voted(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    voter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "voter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  EARLY_VE_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  "EARLY_VE_REWARD_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

  LP_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  "LP_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

  MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_LOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  abstain(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "abstain(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  amount_stored(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "amount_stored(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _approved: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _approved: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAtNFT(
    _tokenId: BigNumberish,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAtNFT(uint256,uint256)"(
    _tokenId: BigNumberish,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfHypotheticalNFT(
    _amount_lp: BigNumberish,
    unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfHypotheticalNFT(uint256,uint256)"(
    _amount_lp: BigNumberish,
    unlock_time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNFT(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfNFT(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNFTAt(
    _tokenId: BigNumberish,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfNFTAt(uint256,uint256)"(
    _tokenId: BigNumberish,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  block_number(overrides?: CallOverrides): Promise<BigNumber>;

  "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

  checkpoint(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpoint()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimFromMasterChef(overrides?: Overrides): Promise<ContractTransaction>;

  "claimFromMasterChef()"(overrides?: Overrides): Promise<ContractTransaction>;

  create_lock(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lock(uint256,uint256)"(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  create_lock_for(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lock_for(uint256,uint256,address)"(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  create_lp_lock(
    _lp_value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lp_lock(uint256,uint256,address)"(
    _lp_value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  deposit_for(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit_for(uint256,uint256)"(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUserFactor(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_last_user_slope(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_last_user_slope(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_ve_reward_amount(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_ve_reward_amount(uint256,uint256)"(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "idToOwner(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  increase_amount(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_amount(uint256,uint256)"(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _tokenId: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_unlock_time(uint256,uint256)"(
    _tokenId: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    token_addr: string,
    _lp_token: string,
    _fairAssetVal: string,
    _masterChef: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    token_addr: string,
    _lp_token: string,
    _fairAssetVal: string,
    _masterChef: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedOrOwner(
    _spender: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedOrOwner(address,uint256)"(
    _spender: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  locked(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    end: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "locked(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    end: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  locked__end(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "locked__end(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  locked_duration(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "locked_duration(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  merge(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "merge(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multi_fee(overrides?: CallOverrides): Promise<string>;

  "multi_fee()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownership_change(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ownership_change(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  point_history(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "point_history(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPerTokenId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardPerTokenId(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFairAssetContract(
    _fairAssetVal: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFairAssetContract(address)"(
    _fairAssetVal: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLPMultiplier(
    lp_multiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLPMultiplier(uint8)"(
    lp_multiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLPToken(
    _lp_token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLPToken(address)"(
    _lp_token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMasterchefContract(
    _masterChef: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMasterchefContract(address)"(
    _masterChef: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinLockTime(
    new_lock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinLockTime(uint128)"(
    new_lock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultiFeeContract(
    _multi_fee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultiFeeContract(address)"(
    _multi_fee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVeMultiplier(
    ve_multiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVeMultiplier(uint8)"(
    ve_multiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVoter(_voter: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setVoter(address)"(
    _voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slope_changes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "slope_changes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  start_time(
    _token_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "start_time(uint256)"(
    _token_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    _interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    _interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenOfOwnerByIndex(
    _owner: string,
    _tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    _owner: string,
    _tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenType(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "tokenType(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAtT(
    t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAtT(uint256)"(
    t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  user_point_epoch(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "user_point_epoch(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  user_point_history(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "user_point_history(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  user_point_history__ts(
    _tokenId: BigNumberish,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "user_point_history__ts(uint256,uint256)"(
    _tokenId: BigNumberish,
    _idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "voted(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voter(overrides?: CallOverrides): Promise<string>;

  "voter()"(overrides?: CallOverrides): Promise<string>;

  voting(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "voting(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    sender: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    sender: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    EARLY_VE_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    "EARLY_VE_REWARD_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

    LP_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    "LP_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_LOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    abstain(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    amount_stored(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "amount_stored(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAtNFT(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAtNFT(uint256,uint256)"(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfHypotheticalNFT(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfHypotheticalNFT(uint256,uint256)"(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    "checkpoint()"(overrides?: CallOverrides): Promise<void>;

    claimFromMasterChef(overrides?: CallOverrides): Promise<void>;

    "claimFromMasterChef()"(overrides?: CallOverrides): Promise<void>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_for(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_last_user_slope(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_last_user_slope(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_ve_reward_amount(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_ve_reward_amount(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_amount(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_unlock_time(uint256,uint256)"(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address)"(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedOrOwner(address,uint256)"(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    locked__end(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked__end(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked_duration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked_duration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "merge(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multi_fee(overrides?: CallOverrides): Promise<string>;

    "multi_fee()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownership_change(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownership_change(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPerTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerTokenId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFairAssetContract(
      _fairAssetVal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFairAssetContract(address)"(
      _fairAssetVal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPMultiplier(
      lp_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLPMultiplier(uint8)"(
      lp_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPToken(_lp_token: string, overrides?: CallOverrides): Promise<void>;

    "setLPToken(address)"(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterchefContract(
      _masterChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMasterchefContract(address)"(
      _masterChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLockTime(
      new_lock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinLockTime(uint128)"(
      new_lock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiFeeContract(
      _multi_fee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultiFeeContract(address)"(
      _multi_fee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVeMultiplier(
      ve_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVeMultiplier(uint8)"(
      ve_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoter(_voter: string, overrides?: CallOverrides): Promise<void>;

    "setVoter(address)"(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "tokenType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAtT(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_point_epoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_epoch(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "user_point_history(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    user_point_history__ts(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history__ts(uint256,uint256)"(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "voted(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voter(overrides?: CallOverrides): Promise<string>;

    "voter()"(overrides?: CallOverrides): Promise<string>;

    voting(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Deposit(
      provider: string | null,
      tokenId: null,
      value: null,
      locktime: BigNumberish | null,
      deposit_type: null,
      ts: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Withdraw(
      provider: string | null,
      tokenId: null,
      value: null,
      ts: null
    ): EventFilter;
  };

  estimateGas: {
    EARLY_VE_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "EARLY_VE_REWARD_MULTIPLIER()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LP_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "LP_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_LOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    abstain(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    amount_stored(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "amount_stored(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAtNFT(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAtNFT(uint256,uint256)"(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfHypotheticalNFT(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfHypotheticalNFT(uint256,uint256)"(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: Overrides): Promise<BigNumber>;

    "checkpoint()"(overrides?: Overrides): Promise<BigNumber>;

    claimFromMasterChef(overrides?: Overrides): Promise<BigNumber>;

    "claimFromMasterChef()"(overrides?: Overrides): Promise<BigNumber>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit_for(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFactor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_last_user_slope(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_last_user_slope(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_ve_reward_amount(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_ve_reward_amount(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_amount(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_unlock_time(uint256,uint256)"(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedOrOwner(address,uint256)"(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked__end(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked_duration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked_duration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "merge(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multi_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "multi_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownership_change(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownership_change(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPerTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerTokenId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFairAssetContract(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFairAssetContract(address)"(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLPMultiplier(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLPMultiplier(uint8)"(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLPToken(_lp_token: string, overrides?: Overrides): Promise<BigNumber>;

    "setLPToken(address)"(
      _lp_token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMasterchefContract(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMasterchefContract(address)"(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinLockTime(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinLockTime(uint128)"(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultiFeeContract(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMultiFeeContract(address)"(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVeMultiplier(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVeMultiplier(uint8)"(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVoter(_voter: string, overrides?: Overrides): Promise<BigNumber>;

    "setVoter(address)"(
      _voter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAtT(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    user_point_epoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_epoch(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user_point_history__ts(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "user_point_history__ts(uint256,uint256)"(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "voted(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;

    "voter()"(overrides?: CallOverrides): Promise<BigNumber>;

    voting(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EARLY_VE_REWARD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EARLY_VE_REWARD_MULTIPLIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LP_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LP_MULTIPLIER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_LOCK_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "abstain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    amount_stored(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "amount_stored(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAtNFT(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAtNFT(uint256,uint256)"(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfHypotheticalNFT(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfHypotheticalNFT(uint256,uint256)"(
      _amount_lp: BigNumberish,
      unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfNFT(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNFTAt(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfNFTAt(uint256,uint256)"(
      _tokenId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    block_number(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "block_number()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpoint()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimFromMasterChef(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimFromMasterChef()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lock_for(uint256,uint256,address)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create_lp_lock(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lp_lock(uint256,uint256,address)"(
      _lp_value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit_for(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_last_user_slope(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_last_user_slope(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_ve_reward_amount(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_ve_reward_amount(uint256,uint256)"(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "idToOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_amount(uint256,uint256)"(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_unlock_time(uint256,uint256)"(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      token_addr: string,
      _lp_token: string,
      _fairAssetVal: string,
      _masterChef: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedOrOwner(address,uint256)"(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked__end(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked__end(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked_duration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked_duration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "merge(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multi_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multi_fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownership_change(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownership_change(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "point_history(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPerTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenId(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFairAssetContract(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFairAssetContract(address)"(
      _fairAssetVal: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLPMultiplier(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLPMultiplier(uint8)"(
      lp_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLPToken(
      _lp_token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLPToken(address)"(
      _lp_token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMasterchefContract(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMasterchefContract(address)"(
      _masterChef: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinLockTime(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinLockTime(uint128)"(
      new_lock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultiFeeContract(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultiFeeContract(address)"(
      _multi_fee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVeMultiplier(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVeMultiplier(uint8)"(
      ve_multiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVoter(
      _voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVoter(address)"(
      _voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slope_changes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slope_changes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start_time(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "start_time(uint256)"(
      _token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenType(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAtT(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    user_point_epoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_epoch(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_history(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_point_history__ts(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user_point_history__ts(uint256,uint256)"(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "voted(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "voting(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      sender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
