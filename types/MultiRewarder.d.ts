/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultiRewarderInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address,address[],address,uint8,uint256[])": FunctionFragment;
    "addRewardTokenToPool(address,address,uint256)": FunctionFragment;
    "getLPSupply(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "onReward(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingTokens(address,address)": FunctionFragment;
    "poolExists(address)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "reclaimTokens(address,uint256,address)": FunctionFragment;
    "removePool(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieveTokenPerBlock(address,uint256)": FunctionFragment;
    "setRewardRate(address,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, string[], string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardTokenToPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLPSupply", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "poolExists", values: [string]): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reclaimTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "removePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveTokenPerBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updatePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardTokenToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveTokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "OnReward(address,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardRateUpdated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateUpdated"): EventFragment;
}

export class MultiRewarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiRewarderInterface;

  functions: {
    addPool(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(address,address[],address,uint8,uint256[])"(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRewardTokenToPool(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardTokenToPool(address,address,uint256)"(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLPSupply(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<{
      lpSupply: BigNumber;
      0: BigNumber;
    }>;

    "getLPSupply(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<{
      lpSupply: BigNumber;
      0: BigNumber;
    }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    onReward(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onReward(address,address,uint256)"(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pendingTokens(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardTokens: string[];
      rewardAmounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    "pendingTokens(address,address)"(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardTokens: string[];
      rewardAmounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    poolExists(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "poolExists(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      numRewardTokens: BigNumber;
      chefContract: string;
      contractType: number;
      lastRewardBlock: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
      3: BigNumber;
    }>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      numRewardTokens: BigNumber;
      chefContract: string;
      contractType: number;
      lastRewardBlock: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
      3: BigNumber;
    }>;

    reclaimTokens(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reclaimTokens(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removePool(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    retrieveTokenPerBlock(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "retrieveTokenPerBlock(address,uint256)"(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setRewardRate(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardRate(address,uint256[])"(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;
  };

  addPool(
    _pool: string,
    _rewardToken: string[],
    _chefContract: string,
    _contractType: BigNumberish,
    _tokenPerBlock: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(address,address[],address,uint8,uint256[])"(
    _pool: string,
    _rewardToken: string[],
    _chefContract: string,
    _contractType: BigNumberish,
    _tokenPerBlock: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRewardTokenToPool(
    _pool: string,
    _rewardToken: string,
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardTokenToPool(address,address,uint256)"(
    _pool: string,
    _rewardToken: string,
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLPSupply(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getLPSupply(address)"(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  onReward(
    _pool: string,
    _user: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onReward(address,address,uint256)"(
    _pool: string,
    _user: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pool: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    rewardTokens: string[];
    rewardAmounts: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  "pendingTokens(address,address)"(
    _pool: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    rewardTokens: string[];
    rewardAmounts: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  poolExists(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  "poolExists(address)"(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    numRewardTokens: BigNumber;
    chefContract: string;
    contractType: number;
    lastRewardBlock: BigNumber;
    0: BigNumber;
    1: string;
    2: number;
    3: BigNumber;
  }>;

  "poolInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    numRewardTokens: BigNumber;
    chefContract: string;
    contractType: number;
    lastRewardBlock: BigNumber;
    0: BigNumber;
    1: string;
    2: number;
    3: BigNumber;
  }>;

  reclaimTokens(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reclaimTokens(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removePool(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removePool(address)"(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  retrieveTokenPerBlock(
    pool: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retrieveTokenPerBlock(address,uint256)"(
    pool: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardRate(
    _pool: string,
    _tokenPerBlock: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardRate(address,uint256[])"(
    _pool: string,
    _tokenPerBlock: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(address)"(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userInfo(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addPool(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(address,address[],address,uint8,uint256[])"(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardTokenToPool(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardTokenToPool(address,address,uint256)"(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLPSupply(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLPSupply(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    onReward(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "onReward(address,address,uint256)"(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardTokens: string[];
      rewardAmounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    "pendingTokens(address,address)"(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardTokens: string[];
      rewardAmounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    poolExists(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    "poolExists(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      numRewardTokens: BigNumber;
      chefContract: string;
      contractType: number;
      lastRewardBlock: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
      3: BigNumber;
    }>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      numRewardTokens: BigNumber;
      chefContract: string;
      contractType: number;
      lastRewardBlock: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
      3: BigNumber;
    }>;

    reclaimTokens(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "reclaimTokens(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePool(_pool: string, overrides?: CallOverrides): Promise<void>;

    "removePool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    retrieveTokenPerBlock(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveTokenPerBlock(address,uint256)"(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardRate(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardRate(address,uint256[])"(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pool: string, overrides?: CallOverrides): Promise<void>;

    "updatePool(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OnReward(
      pool: string | null,
      token: string | null,
      user: string | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardRateUpdated(
      pool: string | null,
      token: string | null,
      oldRate: null,
      newRate: null
    ): EventFilter;
  };

  estimateGas: {
    addPool(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(address,address[],address,uint8,uint256[])"(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRewardTokenToPool(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardTokenToPool(address,address,uint256)"(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLPSupply(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLPSupply(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    onReward(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onReward(address,address,uint256)"(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(address,address)"(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExists(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolExists(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reclaimTokens(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reclaimTokens(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removePool(_pool: string, overrides?: Overrides): Promise<BigNumber>;

    "removePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    retrieveTokenPerBlock(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveTokenPerBlock(address,uint256)"(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardRate(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardRate(address,uint256[])"(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pool: string, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(address,address[],address,uint8,uint256[])"(
      _pool: string,
      _rewardToken: string[],
      _chefContract: string,
      _contractType: BigNumberish,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRewardTokenToPool(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardTokenToPool(address,address,uint256)"(
      _pool: string,
      _rewardToken: string,
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLPSupply(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLPSupply(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onReward(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onReward(address,address,uint256)"(
      _pool: string,
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(address,address)"(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolExists(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolExists(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reclaimTokens(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reclaimTokens(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removePool(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    retrieveTokenPerBlock(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveTokenPerBlock(address,uint256)"(
      pool: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardRate(address,uint256[])"(
      _pool: string,
      _tokenPerBlock: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
