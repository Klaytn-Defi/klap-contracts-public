/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LockdropInterface extends ethers.utils.Interface {
  functions: {
    "aTokens(address)": FunctionFragment;
    "accountBalances(address,address)": FunctionFragment;
    "cap()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "decimals(address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositReady()": FunctionFragment;
    "owner()": FunctionFragment;
    "prices(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address,uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setPrice(address,uint256)": FunctionFragment;
    "setStatus(bool)": FunctionFragment;
    "setUnlockTime(uint256)": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockTime()": FunctionFragment;
    "usdDeposited()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReady",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prices", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStatus", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdDeposited",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "aTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdDeposited",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Lockdrop extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LockdropInterface;

  functions: {
    aTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "aTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    accountBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accountBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    claim(_aToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      _aToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "decimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deposit(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositReady(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "depositReady()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "prices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rescue(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescue(address,uint256)"(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCap(
      _cap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      _cap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrice(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrice(address,uint256)"(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStatus(
      _isReady: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStatus(bool)"(
      _isReady: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUnlockTime(uint256)"(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unlockTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    usdDeposited(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "usdDeposited()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  aTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "aTokens(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  accountBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accountBalances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(_aToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    _aToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "decimals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _aToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _amount: BigNumberish,
    _aToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositReady(overrides?: CallOverrides): Promise<boolean>;

  "depositReady()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "prices(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rescue(
    _aToken: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescue(address,uint256)"(
    _aToken: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCap(
    _cap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    _cap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrice(
    _aToken: string,
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrice(address,uint256)"(
    _aToken: string,
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStatus(
    _isReady: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStatus(bool)"(
    _isReady: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUnlockTime(
    _unlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUnlockTime(uint256)"(
    _unlockTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalDeposits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  usdDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  "usdDeposited()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "aTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accountBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(_aToken: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(_aToken: string, overrides?: CallOverrides): Promise<void>;

    decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "decimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReady(overrides?: CallOverrides): Promise<boolean>;

    "depositReady()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "prices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescue(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address,uint256)"(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(_cap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      _cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      _aToken: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPrice(address,uint256)"(
      _aToken: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(_isReady: boolean, overrides?: CallOverrides): Promise<void>;

    "setStatus(bool)"(
      _isReady: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUnlockTime(uint256)"(
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    "usdDeposited()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Claim(
      _claimer: string | null,
      _aToken: string | null,
      amount: null
    ): EventFilter;

    Deposit(
      _depositor: string | null,
      _aToken: string | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    aTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "aTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(_aToken: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(
      _aToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "decimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositReady(overrides?: CallOverrides): Promise<BigNumber>;

    "depositReady()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "prices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rescue(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescue(address,uint256)"(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCap(_cap: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCap(uint256)"(
      _cap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrice(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPrice(address,uint256)"(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStatus(_isReady: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setStatus(bool)"(
      _isReady: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUnlockTime(uint256)"(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    "usdDeposited()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _aToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      _aToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _amount: BigNumberish,
      _aToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositReady(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositReady()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rescue(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescue(address,uint256)"(
      _aToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCap(
      _cap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      _cap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrice(address,uint256)"(
      _aToken: string,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStatus(
      _isReady: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStatus(bool)"(
      _isReady: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUnlockTime(uint256)"(
      _unlockTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDeposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unlockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdDeposited()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
