/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IChefIncentivesControllerInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address,uint256)": FunctionFragment;
    "claim(address,address[])": FunctionFragment;
    "claimableKlap(address,address)": FunctionFragment;
    "handleAction(address,uint256,uint256)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "remove_vote(uint256)": FunctionFragment;
    "rewardMinter()": FunctionFragment;
    "rewardsPerSecond()": FunctionFragment;
    "setClaimReceiver(address,address)": FunctionFragment;
    "updateFactor(address)": FunctionFragment;
    "vote(uint256,address[],int256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableKlap",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAction",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "remove_vote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimReceiver",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableKlap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_vote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export class IChefIncentivesController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IChefIncentivesControllerInterface;

  functions: {
    addPool(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(address,uint256)"(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableKlap(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimableKlap(address,address)"(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "handleAction(address,uint256,uint256)"(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        totalSupply: BigNumber;
        lastRewardTime: BigNumber;
        accKlapPerShare: BigNumber;
        accKlapPerFactorShare: BigNumber;
        sumOfFactors: BigNumber;
        onwardIncentives: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
      };
    }>;

    "poolInfo(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        totalSupply: BigNumber;
        lastRewardTime: BigNumber;
        accKlapPerShare: BigNumber;
        accKlapPerFactorShare: BigNumber;
        sumOfFactors: BigNumber;
        onwardIncentives: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
      };
    }>;

    remove_vote(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_vote(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFactor(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vote(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,address[],int256[])"(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addPool(
    _token: string,
    i: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(address,uint256)"(
    _token: string,
    i: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    _user: string,
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,address[])"(
    _user: string,
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimableKlap(
    user: string,
    token_pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableKlap(address,address)"(
    user: string,
    token_pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  handleAction(
    user: string,
    userBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "handleAction(address,uint256,uint256)"(
    user: string,
    userBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolInfo(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalSupply: BigNumber;
    lastRewardTime: BigNumber;
    accKlapPerShare: BigNumber;
    accKlapPerFactorShare: BigNumber;
    sumOfFactors: BigNumber;
    onwardIncentives: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
  }>;

  "poolInfo(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalSupply: BigNumber;
    lastRewardTime: BigNumber;
    accKlapPerShare: BigNumber;
    accKlapPerFactorShare: BigNumber;
    sumOfFactors: BigNumber;
    onwardIncentives: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
  }>;

  remove_vote(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_vote(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardMinter(overrides?: CallOverrides): Promise<string>;

  "rewardMinter()"(overrides?: CallOverrides): Promise<string>;

  rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

  setClaimReceiver(
    _user: string,
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setClaimReceiver(address,address)"(
    _user: string,
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFactor(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFactor(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vote(
    tokenId: BigNumberish,
    pools: string[],
    weights: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,address[],int256[])"(
    tokenId: BigNumberish,
    pools: string[],
    weights: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      _token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(address,uint256)"(
      _token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimableKlap(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableKlap(address,address)"(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "handleAction(address,uint256,uint256)"(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalSupply: BigNumber;
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
    }>;

    "poolInfo(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalSupply: BigNumber;
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
    }>;

    remove_vote(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_vote(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardMinter(overrides?: CallOverrides): Promise<string>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<string>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFactor(_user: string, overrides?: CallOverrides): Promise<void>;

    "updateFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,address[],int256[])"(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addPool(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(address,uint256)"(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimableKlap(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableKlap(address,address)"(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "handleAction(address,uint256,uint256)"(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolInfo(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove_vote(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_vote(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardMinter(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFactor(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vote(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,address[],int256[])"(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(address,uint256)"(
      _token: string,
      i: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableKlap(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableKlap(address,address)"(
      user: string,
      token_pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "handleAction(address,uint256,uint256)"(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove_vote(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_vote(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerSecond()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFactor(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vote(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,address[],int256[])"(
      tokenId: BigNumberish,
      pools: string[],
      weights: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
