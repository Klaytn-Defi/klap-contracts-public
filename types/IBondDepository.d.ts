/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBondDepositoryInterface extends ethers.utils.Interface {
  functions: {
    "close(uint256)": FunctionFragment;
    "create(address,uint256[3],bool[2],uint256[2],uint32[2])": FunctionFragment;
    "currentDebt(uint256)": FunctionFragment;
    "debtDecay(uint256)": FunctionFragment;
    "debtRatio(uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256,address,address)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "liveMarkets()": FunctionFragment;
    "liveMarketsFor(address)": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "payoutFor(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      [BigNumberish, BigNumberish, BigNumberish],
      [boolean, boolean],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liveMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liveMarketsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;

  events: {};
}

export class IBondDepository extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBondDepositoryInterface;

  functions: {
    close(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "close(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    create(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(address,uint256[3],bool[2],uint256[2],uint32[2])"(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentDebt(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "currentDebt(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    debtDecay(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debtDecay(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    debtRatio(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debtRatio(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256,address,address)"(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isLive(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLive(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    liveMarkets(overrides?: CallOverrides): Promise<{
      0: BigNumber[];
    }>;

    "liveMarkets()"(overrides?: CallOverrides): Promise<{
      0: BigNumber[];
    }>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "liveMarketsFor(address)"(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    marketPrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "marketPrice(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "payoutFor(uint256,uint256)"(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  close(_id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "close(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  create(
    _quoteToken: string,
    _market: [BigNumberish, BigNumberish, BigNumberish],
    _booleans: [boolean, boolean],
    _terms: [BigNumberish, BigNumberish],
    _intervals: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(address,uint256[3],bool[2],uint256[2],uint32[2])"(
    _quoteToken: string,
    _market: [BigNumberish, BigNumberish, BigNumberish],
    _booleans: [boolean, boolean],
    _terms: [BigNumberish, BigNumberish],
    _intervals: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentDebt(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentDebt(uint256)"(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtDecay(_bid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "debtDecay(uint256)"(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtRatio(_bid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "debtRatio(uint256)"(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _bid: BigNumberish,
    _amount: BigNumberish,
    _maxPrice: BigNumberish,
    _user: string,
    _referral: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256,address,address)"(
    _bid: BigNumberish,
    _amount: BigNumberish,
    _maxPrice: BigNumberish,
    _user: string,
    _referral: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isLive(uint256)"(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

  "liveMarkets()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  liveMarketsFor(
    _quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "liveMarketsFor(address)"(
    _quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  marketPrice(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "marketPrice(uint256)"(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payoutFor(
    _amount: BigNumberish,
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "payoutFor(uint256,uint256)"(
    _amount: BigNumberish,
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    close(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "close(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create(address,uint256[3],bool[2],uint256[2],uint32[2])"(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentDebt(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentDebt(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtDecay(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtDecay(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtRatio(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<{
      payout_: BigNumber;
      expiry_: BigNumber;
      index_: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "deposit(uint256,uint256,uint256,address,address)"(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<{
      payout_: BigNumber;
      expiry_: BigNumber;
      index_: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isLive(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

    "liveMarkets()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "liveMarketsFor(address)"(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    marketPrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketPrice(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payoutFor(uint256,uint256)"(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    close(_id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "close(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    create(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(address,uint256[3],bool[2],uint256[2],uint32[2])"(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentDebt(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentDebt(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtDecay(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtDecay(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtRatio(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256,address,address)"(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "isLive(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "liveMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liveMarketsFor(address)"(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketPrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketPrice(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payoutFor(uint256,uint256)"(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    close(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "close(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    create(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(address,uint256[3],bool[2],uint256[2],uint32[2])"(
      _quoteToken: string,
      _market: [BigNumberish, BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentDebt(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDebt(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtDecay(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtDecay(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtRatio(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtRatio(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256,address,address)"(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isLive(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLive(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liveMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liveMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liveMarketsFor(address)"(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketPrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketPrice(uint256)"(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payoutFor(uint256,uint256)"(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
