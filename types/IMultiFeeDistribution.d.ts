/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMultiFeeDistributionInterface extends ethers.utils.Interface {
  functions: {
    "decreaseVeRewardsTotal(uint256)": FunctionFragment;
    "lockedSupply()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintDirect(address,uint256)": FunctionFragment;
    "rewardThreshold()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "totalVeRewards()": FunctionFragment;
    "wrapped_native_token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseVeRewardsTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDirect",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapped_native_token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseVeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintDirect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapped_native_token",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMultiFeeDistribution extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMultiFeeDistributionInterface;

  functions: {
    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    stakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "stakingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalVeRewards(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    wrapped_native_token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  decreaseVeRewardsTotal(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseVeRewardsTotal(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintDirect(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintDirect(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  wrapped_native_token(overrides?: CallOverrides): Promise<string>;

  "wrapped_native_token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrapped_native_token(overrides?: CallOverrides): Promise<string>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalVeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVeRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrapped_native_token(overrides?: CallOverrides): Promise<BigNumber>;

    "wrapped_native_token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseVeRewardsTotal(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseVeRewardsTotal(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintDirect(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintDirect(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalVeRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapped_native_token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrapped_native_token()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
