/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefInterface extends ethers.utils.Interface {
  functions: {
    "_ve()": FunctionFragment;
    "addPool(address,uint256)": FunctionFragment;
    "allocPoints(address)": FunctionFragment;
    "claim(address,address[])": FunctionFragment;
    "claimReceiver(address)": FunctionFragment;
    "claimableReward(address,address[])": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositFromVe(address,uint256,address)": FunctionFragment;
    "dialutingRepartition()": FunctionFragment;
    "emergencyWithdraw(address)": FunctionFragment;
    "emissionSchedule(uint256)": FunctionFragment;
    "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)": FunctionFragment;
    "maxMintableTokens()": FunctionFragment;
    "mintedTokens()": FunctionFragment;
    "nonDialutingRepartition()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolConfigurator()": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "registeredTokens(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardMinter()": FunctionFragment;
    "rewarder()": FunctionFragment;
    "rewardsPerSecond()": FunctionFragment;
    "setClaimReceiver(address,address)": FunctionFragment;
    "setEmissionSchedule(uint128[],uint128[])": FunctionFragment;
    "setOnwardIncentives(address,address)": FunctionFragment;
    "setRewarder(address)": FunctionFragment;
    "start()": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEmissionRepartition(uint256)": FunctionFragment;
    "updateFactor(address)": FunctionFragment;
    "userBaseClaimable(address,address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFromVe(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allocPoints", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromVe",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dialutingRepartition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish[],
      BigNumberish[],
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonDialutingRepartition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMinter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewarder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimReceiver",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionSchedule",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnwardIncentives",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setRewarder", values: [string]): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRepartition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userBaseClaimable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVe",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFromVe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dialutingRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonDialutingRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnwardIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBaseClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVe",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "EmergencyWithdraw(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateEmissionRepartition(address,uint256,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRepartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefInterface;

  functions: {
    _ve(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "_ve()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addPool(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(address,uint256)"(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimReceiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "claimReceiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "claimableReward(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dialutingRepartition(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emissionSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTimeOffset: BigNumber;
      rewardsPerSecond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "emissionSchedule(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTimeOffset: BigNumber;
      rewardsPerSecond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxMintableTokens(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxMintableTokens()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mintedTokens(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "mintedTokens()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    poolConfigurator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "poolConfigurator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    poolLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "poolLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registeredTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewarder(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewarder()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEmissionSchedule(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmissionSchedule(uint128[],uint128[])"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOnwardIncentives(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOnwardIncentives(address,address)"(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewarder(
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewarder(address)"(
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    start(overrides?: Overrides): Promise<ContractTransaction>;

    "start()"(overrides?: Overrides): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "startTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalAllocPoint(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFactor(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBaseClaimable(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userBaseClaimable(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      ve_deposited_amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      ve_deposited_amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _ve(overrides?: CallOverrides): Promise<string>;

  "_ve()"(overrides?: CallOverrides): Promise<string>;

  addPool(
    _token: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(address,uint256)"(
    _token: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "allocPoints(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    _user: string,
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address,address[])"(
    _user: string,
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimReceiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  "claimReceiver(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  claimableReward(
    _user: string,
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "claimableReward(address,address[])"(
    _user: string,
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFromVe(
    _token: string,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFromVe(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

  "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emissionSchedule(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startTimeOffset: BigNumber;
    rewardsPerSecond: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "emissionSchedule(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startTimeOffset: BigNumber;
    rewardsPerSecond: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  initialize(
    _startTimeOffset: BigNumberish[],
    _rewardsPerSecond: BigNumberish[],
    _poolConfigurator: string,
    _rewardMinter: string,
    ve: string,
    _maxMintable: BigNumberish,
    _dialutingRepartition: BigNumberish,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)"(
    _startTimeOffset: BigNumberish[],
    _rewardsPerSecond: BigNumberish[],
    _poolConfigurator: string,
    _rewardMinter: string,
    ve: string,
    _maxMintable: BigNumberish,
    _dialutingRepartition: BigNumberish,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMintableTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "mintedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

  "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolConfigurator(overrides?: CallOverrides): Promise<string>;

  "poolConfigurator()"(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    lastRewardTime: BigNumber;
    accKlapPerShare: BigNumber;
    accKlapPerFactorShare: BigNumber;
    sumOfFactors: BigNumber;
    onwardIncentives: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  "poolInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    lastRewardTime: BigNumber;
    accKlapPerShare: BigNumber;
    accKlapPerFactorShare: BigNumber;
    sumOfFactors: BigNumber;
    onwardIncentives: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  registeredTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "registeredTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardMinter(overrides?: CallOverrides): Promise<string>;

  "rewardMinter()"(overrides?: CallOverrides): Promise<string>;

  rewarder(overrides?: CallOverrides): Promise<string>;

  "rewarder()"(overrides?: CallOverrides): Promise<string>;

  rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

  setClaimReceiver(
    _user: string,
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setClaimReceiver(address,address)"(
    _user: string,
    _receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEmissionSchedule(
    _startTimeOffset: BigNumberish[],
    _rewardsPerSecond: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmissionSchedule(uint128[],uint128[])"(
    _startTimeOffset: BigNumberish[],
    _rewardsPerSecond: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOnwardIncentives(
    _token: string,
    _incentives: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOnwardIncentives(address,address)"(
    _token: string,
    _incentives: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewarder(
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewarder(address)"(
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  start(overrides?: Overrides): Promise<ContractTransaction>;

  "start()"(overrides?: Overrides): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateEmissionRepartition(
    _dialutingRepartition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateEmissionRepartition(uint256)"(
    _dialutingRepartition: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFactor(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFactor(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBaseClaimable(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBaseClaimable(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    ve_deposited_amount: BigNumber;
    rewardDebt: BigNumber;
    factor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "userInfo(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    ve_deposited_amount: BigNumber;
    rewardDebt: BigNumber;
    factor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFromVe(
    _token: string,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFromVe(address,uint256,address)"(
    _token: string,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _ve(overrides?: CallOverrides): Promise<string>;

    "_ve()"(overrides?: CallOverrides): Promise<string>;

    addPool(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(address,uint256)"(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReceiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    "claimReceiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "claimableReward(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(_token: string, overrides?: CallOverrides): Promise<void>;

    "emergencyWithdraw(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emissionSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTimeOffset: BigNumber;
      rewardsPerSecond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "emissionSchedule(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTimeOffset: BigNumber;
      rewardsPerSecond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    initialize(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintableTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolConfigurator(overrides?: CallOverrides): Promise<string>;

    "poolConfigurator()"(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      lastRewardTime: BigNumber;
      accKlapPerShare: BigNumber;
      accKlapPerFactorShare: BigNumber;
      sumOfFactors: BigNumber;
      onwardIncentives: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "registeredTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardMinter(overrides?: CallOverrides): Promise<string>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<string>;

    rewarder(overrides?: CallOverrides): Promise<string>;

    "rewarder()"(overrides?: CallOverrides): Promise<string>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmissionSchedule(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmissionSchedule(uint128[],uint128[])"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOnwardIncentives(
      _token: string,
      _incentives: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOnwardIncentives(address,address)"(
      _token: string,
      _incentives: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewarder(_rewarder: string, overrides?: CallOverrides): Promise<void>;

    "setRewarder(address)"(
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFactor(_user: string, overrides?: CallOverrides): Promise<void>;

    "updateFactor(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userBaseClaimable(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBaseClaimable(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      ve_deposited_amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      ve_deposited_amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      token: string | null,
      user: string | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      token: string | null,
      user: string | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    UpdateEmissionRepartition(
      user: string | null,
      dialutingRepartition: null,
      nonDialutingRepartition: null
    ): EventFilter;

    Withdraw(
      token: string | null,
      user: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    "_ve()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(address,uint256)"(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimReceiver(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimReceiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableReward(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emissionSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emissionSchedule(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintableTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    "poolConfigurator()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registeredTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardMinter(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<BigNumber>;

    "rewarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEmissionSchedule(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmissionSchedule(uint128[],uint128[])"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOnwardIncentives(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOnwardIncentives(address,address)"(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewarder(_rewarder: string, overrides?: Overrides): Promise<BigNumber>;

    "setRewarder(address)"(
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    start(overrides?: Overrides): Promise<BigNumber>;

    "start()"(overrides?: Overrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFactor(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBaseClaimable(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBaseClaimable(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_ve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(address,uint256)"(
      _token: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimReceiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimReceiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableReward(address,address[])"(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dialutingRepartition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dialutingRepartition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emissionSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emissionSchedule(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint128[],uint128[],address,address,address,uint256,uint256,address)"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      _poolConfigurator: string,
      _rewardMinter: string,
      ve: string,
      _maxMintable: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxMintableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMintableTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintedTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonDialutingRepartition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonDialutingRepartition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolConfigurator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registeredTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardMinter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewarder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerSecond()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClaimReceiver(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setClaimReceiver(address,address)"(
      _user: string,
      _receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEmissionSchedule(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmissionSchedule(uint128[],uint128[])"(
      _startTimeOffset: BigNumberish[],
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOnwardIncentives(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOnwardIncentives(address,address)"(
      _token: string,
      _incentives: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewarder(
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewarder(address)"(
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    start(overrides?: Overrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFactor(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFactor(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBaseClaimable(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBaseClaimable(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFromVe(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFromVe(address,uint256,address)"(
      _token: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
