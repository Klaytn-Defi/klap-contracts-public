/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardClaimerInterface extends ethers.utils.Interface {
  functions: {
    "claimKLAP()": FunctionFragment;
    "claimKLAY()": FunctionFragment;
    "deposit()": FunctionFragment;
    "klap()": FunctionFragment;
    "klapClaimable()": FunctionFragment;
    "klapToClaim(address)": FunctionFragment;
    "klayToClaim(address)": FunctionFragment;
    "mintingContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address,uint256)": FunctionFragment;
    "setAddress(address)": FunctionFragment;
    "setKLAPAmounts(address[],uint256[])": FunctionFragment;
    "setKLAYAmounts(address[],uint256[])": FunctionFragment;
    "setKlapClaimable(bool)": FunctionFragment;
    "setMintingContract(address)": FunctionFragment;
    "sweepAll()": FunctionFragment;
    "totalKlapAmount()": FunctionFragment;
    "totalKlayAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimKLAP", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimKLAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "klap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "klapClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "klapToClaim", values: [string]): string;
  encodeFunctionData(functionFragment: "klayToClaim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintingContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKLAPAmounts",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKLAYAmounts",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKlapClaimable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sweepAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalKlapAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalKlayAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "claimKLAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimKLAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "klap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "klapClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "klapToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "klayToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKLAPAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKLAYAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKlapClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalKlapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalKlayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimKlap(address,uint256)": EventFragment;
    "ClaimKlay(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimKlap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimKlay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RewardClaimer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardClaimerInterface;

  functions: {
    claimKLAP(overrides?: Overrides): Promise<ContractTransaction>;

    "claimKLAP()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimKLAY(overrides?: Overrides): Promise<ContractTransaction>;

    "claimKLAY()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    klap(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "klap()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    klapClaimable(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "klapClaimable()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    klapToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "klapToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    klayToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "klayToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mintingContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "mintingContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAddress(
      _klap: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddress(address)"(
      _klap: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKLAPAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKLAPAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKLAYAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKLAYAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setKlapClaimable(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKlapClaimable(bool)"(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMintingContract(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMintingContract(address)"(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sweepAll(overrides?: Overrides): Promise<ContractTransaction>;

    "sweepAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    totalKlapAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalKlapAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalKlayAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalKlayAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimKLAP(overrides?: Overrides): Promise<ContractTransaction>;

  "claimKLAP()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimKLAY(overrides?: Overrides): Promise<ContractTransaction>;

  "claimKLAY()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  klap(overrides?: CallOverrides): Promise<string>;

  "klap()"(overrides?: CallOverrides): Promise<string>;

  klapClaimable(overrides?: CallOverrides): Promise<boolean>;

  "klapClaimable()"(overrides?: CallOverrides): Promise<boolean>;

  klapToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "klapToClaim(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  klayToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "klayToClaim(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintingContract(overrides?: CallOverrides): Promise<string>;

  "mintingContract()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rescue(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescue(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAddress(
    _klap: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddress(address)"(
    _klap: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKLAPAmounts(
    _users: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKLAPAmounts(address[],uint256[])"(
    _users: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKLAYAmounts(
    _users: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKLAYAmounts(address[],uint256[])"(
    _users: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setKlapClaimable(
    _isClaimable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKlapClaimable(bool)"(
    _isClaimable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMintingContract(
    _mintingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMintingContract(address)"(
    _mintingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sweepAll(overrides?: Overrides): Promise<ContractTransaction>;

  "sweepAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  totalKlapAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalKlapAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalKlayAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalKlayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimKLAP(overrides?: CallOverrides): Promise<void>;

    "claimKLAP()"(overrides?: CallOverrides): Promise<void>;

    claimKLAY(overrides?: CallOverrides): Promise<void>;

    "claimKLAY()"(overrides?: CallOverrides): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    klap(overrides?: CallOverrides): Promise<string>;

    "klap()"(overrides?: CallOverrides): Promise<string>;

    klapClaimable(overrides?: CallOverrides): Promise<boolean>;

    "klapClaimable()"(overrides?: CallOverrides): Promise<boolean>;

    klapToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "klapToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    klayToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "klayToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingContract(overrides?: CallOverrides): Promise<string>;

    "mintingContract()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddress(_klap: string, overrides?: CallOverrides): Promise<void>;

    "setAddress(address)"(
      _klap: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKLAPAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setKLAPAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKLAYAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setKLAYAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKlapClaimable(
      _isClaimable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setKlapClaimable(bool)"(
      _isClaimable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingContract(
      _mintingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintingContract(address)"(
      _mintingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepAll(overrides?: CallOverrides): Promise<void>;

    "sweepAll()"(overrides?: CallOverrides): Promise<void>;

    totalKlapAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalKlapAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalKlayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalKlayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClaimKlap(_claimer: string | null, amount: null): EventFilter;

    ClaimKlay(_claimer: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    claimKLAP(overrides?: Overrides): Promise<BigNumber>;

    "claimKLAP()"(overrides?: Overrides): Promise<BigNumber>;

    claimKLAY(overrides?: Overrides): Promise<BigNumber>;

    "claimKLAY()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    klap(overrides?: CallOverrides): Promise<BigNumber>;

    "klap()"(overrides?: CallOverrides): Promise<BigNumber>;

    klapClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    "klapClaimable()"(overrides?: CallOverrides): Promise<BigNumber>;

    klapToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "klapToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    klayToClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "klayToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingContract(overrides?: CallOverrides): Promise<BigNumber>;

    "mintingContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAddress(_klap: string, overrides?: Overrides): Promise<BigNumber>;

    "setAddress(address)"(
      _klap: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKLAPAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setKLAPAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKLAYAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setKLAYAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setKlapClaimable(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setKlapClaimable(bool)"(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMintingContract(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMintingContract(address)"(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sweepAll(overrides?: Overrides): Promise<BigNumber>;

    "sweepAll()"(overrides?: Overrides): Promise<BigNumber>;

    totalKlapAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalKlapAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalKlayAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalKlayAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimKLAP(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimKLAP()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimKLAY(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimKLAY()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    klap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "klap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    klapClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "klapClaimable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    klapToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "klapToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    klayToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "klayToClaim(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintingContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rescue(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescue(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAddress(
      _klap: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddress(address)"(
      _klap: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKLAPAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKLAPAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKLAYAmounts(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKLAYAmounts(address[],uint256[])"(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setKlapClaimable(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKlapClaimable(bool)"(
      _isClaimable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMintingContract(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMintingContract(address)"(
      _mintingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sweepAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sweepAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    totalKlapAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalKlapAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalKlayAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalKlayAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
